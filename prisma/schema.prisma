generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  DELIVERY_PERSON
  RESTAURANT_OWNER
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
  CANCELLED
}

enum DeliveryPersonStatus {
  AVAILABLE
  UNAVAILABLE
}

enum DeliveryStatus {
  ASSIGNED
  IN_TRANSIT
  DELIVERED
}

model User {
  id                String            @id @default(cuid())
  fullname          String
  email             String            @unique
  mobileNumber      String            @unique
  /// @TypeGraphQL.omit(output: true)
  password          String
  /// @TypeGraphQL.omit(output: true)
  role              UserRole          @default(CUSTOMER)
  dateOfBirth       DateTime
  address           String?
  /// @TypeGraphQL.omit(output: true)
  otp               String?
  /// @TypeGraphQL.omit(output: true)
  otpExpires        DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  imageUrl          String?

  orders            Order[]
  cart              Cart?
  deliveryPerson    DeliveryPerson?   @relation("UserToDeliveryPerson")
  ownedRestaurants  Restaurant[]      @relation("RestaurantOwner")
  reviews           Review[]
  deliveryAddresses DeliveryAddress[]
}

model Restaurant {
  id                String            @id @default(cuid()) 
  name              String
  location          String
  menuItems         MenuItem[]
  operatingHours    String
  createdAt         DateTime          @default(now()) 
  updatedAt         DateTime          @updatedAt 

  owner             User?             @relation("RestaurantOwner", fields: [ownerId], references: [id])
  ownerId           String?
  orders            Order[]
  reviews           Review[]
}

model MenuItem {
  id                String            @id @default(cuid()) 
  name              String
  description       String
  price             Float
  category          String
  imageUrl          String
  restaurant        Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId      String
  createdAt         DateTime          @default(now()) 
  updatedAt         DateTime          @updatedAt 

  orderItems        OrderItem[]
  cartItems         CartItem[]
  reviews           Review[]
}

model Review {
  id                String            @id @default(cuid())
  menuItem          MenuItem          @relation(fields: [menuItemId], references: [id])
  menuItemId        String
  review            String
  rating            Int
  createdAt         DateTime          @default(now()) 
  updatedAt         DateTime          @updatedAt 

  user              User              @relation(fields: [userId], references: [id])
  userId            String
  restaurant        Restaurant        @relation(fields: [restaurantId], references: [id])
  restaurantId      String
}


model Order {
  id                String            @id @default(cuid()) 
  user              User              @relation(fields: [userId], references: [id])
  userId            String
  restaurant        Restaurant        @relation(fields: [restaurantId], references: [id])
  restaurantId      String
  totalPrice        Float
  status            OrderStatus       @default(PENDING)
  createdAt         DateTime          @default(now()) 
  updatedAt         DateTime          @default(now()) 

  orderItems        OrderItem[]
  delivery          Delivery?
}

model OrderItem {
  id                String            @id @default(cuid()) 
  order             Order             @relation(fields: [orderId], references: [id])
  orderId           String
  menuItem          MenuItem          @relation(fields: [menuItemId], references: [id])
  menuItemId        String
  quantity          Int
}

model DeliveryPerson {
  id                String                  @id @default(cuid())
  user              User                    @relation("UserToDeliveryPerson", fields: [userId], references: [id])
  userId            String                  @unique
  status            DeliveryPersonStatus    @default(AVAILABLE)
  
  deliveries        Delivery[]              @relation("DeliveryPersonDeliveries")
}

model Delivery {
  id                String                  @id @default(cuid())
  order             Order                   @relation(fields: [orderId], references: [id])
  orderId           String                  @unique
  deliveryPerson    DeliveryPerson          @relation("DeliveryPersonDeliveries", fields: [deliveryPersonId], references: [id])
  deliveryPersonId  String
  status            DeliveryStatus          @default(ASSIGNED)
  deliveryTime      DateTime
  deliveryAddress   String
}

model DeliveryAddress {
  id                String                  @id @default(cuid())
  user              User                    @relation(fields: [userId], references: [id])
  userId            String
  title             String
  address           String
  createdAt         DateTime                @default(now())
}

model Cart {
  id                String                  @id @default(cuid())
  user              User                    @relation(fields: [userId], references: [id])
  userId            String                  @unique
  cartItems         CartItem[]              
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
}

model CartItem {
  id                String                  @id @default(cuid())
  cart              Cart                    @relation(fields: [cartId], references: [id])
  cartId            String
  menuItem          MenuItem                @relation(fields: [menuItemId], references: [id])
  menuItemId        String
  quantity          Int
  createdAt         DateTime                @default(now())
}