generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  DELIVERY_PERSON
  RESTAURANT_OWNER
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
  CANCELLED
}

enum DeliveryStatus {
  ASSIGNED
  IN_TRANSIT
  DELIVERED
}

model User {
  id           String     @id @default(cuid()) 
  fullname     String
  email        String     @unique
  mobileNumber String     @unique
  password     String     
  role         UserRole   @default(CUSTOMER)
  dateOfBirth  DateTime
  address      String?
  otp          String?     
  otpExpires   DateTime?   
  createdAt    DateTime   @default(now()) 
  updatedAt    DateTime   @updatedAt 

  orders       Order[]
  cart         Cart?
  deliveries   Delivery[] @relation("DeliveryPerson") 
  ownedRestaurants Restaurant[] @relation("RestaurantOwner") 
}

model Restaurant {
  id           String     @id @default(cuid()) 
  name         String
  location     String
  menuItems    MenuItem[]
  operatingHours String
  createdAt    DateTime   @default(now()) 
  updatedAt    DateTime   @updatedAt 

  owner        User?      @relation("RestaurantOwner", fields: [ownerId], references: [id])
  ownerId      String?
  orders       Order[]
}

model MenuItem {
  id          String     @id @default(cuid()) 
  name        String
  description String
  price       Float
  category    String
  imageUrl    String
  restaurant  Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId String
  createdAt   DateTime    @default(now()) 
  updatedAt   DateTime    @updatedAt 

  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model Order {
  id           String      @id @default(cuid()) 
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId String
  totalPrice   Float
  status       OrderStatus @default(PENDING)
  createdAt    DateTime    @default(now()) 
  updatedAt    DateTime    @default(now()) 

  orderItems   OrderItem[]
  delivery     Delivery?
}

model OrderItem {
  id         String   @id @default(cuid()) 
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String
  quantity   Int
}

model Delivery {
  id              String      @id @default(cuid()) 
  order           Order       @relation(fields: [orderId], references: [id])
  orderId         String      @unique
  deliveryPerson  User        @relation("DeliveryPerson", fields: [deliveryPersonId], references: [id])
  deliveryPersonId String
  status          DeliveryStatus @default(ASSIGNED)
  deliveryTime    DateTime
}

model Cart {
  id         String    @id @default(cuid()) 
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @unique
  cartItems  CartItem[]
  createdAt  DateTime  @default(now()) 
  updatedAt  DateTime  @updatedAt 
}

model CartItem {
  id         String   @id @default(cuid()) 
  cart       Cart     @relation(fields: [cartId], references: [id])
  cartId     String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String
  quantity   Int
  createdAt  DateTime @default(now()) 
}
